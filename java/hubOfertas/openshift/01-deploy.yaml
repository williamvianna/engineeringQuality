apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ${PROJECT_NAME_SLUG}
    app.gitlab.com/env: ${CI_ENVIRONMENT_NAME}
  annotations:
    app.gitlab.com/app: ${CI_PROJECT_PATH_URI}
  name: ${PROJECT_NAME_SLUG}
  namespace: ${KUBE_NAMESPACE}
spec:
  replicas: ${MIN_REPLICAS}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      run: ${PROJECT_NAME_SLUG}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: ${MAX_UNAVAILABLE}
      maxSurge: ${MAX_SURGE}
  template:
    metadata:
      labels:
        run: ${PROJECT_NAME_SLUG}
        app.gitlab.com/env: ${CI_ENVIRONMENT_NAME}
      annotations:
        app.gitlab.com/app: ${CI_PROJECT_PATH_URI}
        maintainers: ${MAINTAINERS_TEAM}
        grupo_solucionador: ${GRUPO_SOLUCIONADOR}
        build_id: '${Build.BuildId}'
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: run
                      operator: In
                      values:
                        - ${PROJECT_NAME_SLUG}
                topologyKey: topology.kubernetes.io/zone
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: run
                      operator: In
                      values:
                        - ${PROJECT_NAME_SLUG}
                topologyKey: kubernetes.io/hostname
      containers:
        - image: ${CI_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
          imagePullPolicy: Always
          name: ${PROJECT_NAME_SLUG}
          ports:
            - containerPort: 3000
              protocol: TCP
          resources:
            requests:
              cpu: ${REQUESTS_CPU} # 135m
              memory: ${REQUESTS_MEM} # 270Mi
            limits:
              cpu: ${LIMITS_CPU} # 150m
              memory: ${LIMITS_MEM} # 300Mi
          startupProbe:
            httpGet:
              path: /#/login
              port: 3000
            failureThreshold: 30
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 3000
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /#/login
              port: 3000
              httpHeaders:
                - name: X-Custom-Header
                  value: Awesome
            timeoutSeconds: 2
            failureThreshold: 3
          env:
            - name: TZ
              value: America/
          volumeMounts:
            - name: app-config
              mountPath: '/app/config/'
              readOnly: true
      volumes:
        - name: app-config
          secret:
            secretName: ${PROJECT_NAME_SLUG}
          resources: {}
      restartPolicy: Always
